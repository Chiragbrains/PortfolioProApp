-- Enable the pgvector extension if not already enabled
CREATE EXTENSION IF NOT EXISTS vector;

-- Drop existing tables if they exist
DROP TABLE IF EXISTS public.alpha_vantage_docs;
DROP TABLE IF EXISTS public.api_documentation_embeddings;

-- Create the new api_documentation_embeddings table
CREATE TABLE public.api_documentation_embeddings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    text_chunk TEXT NOT NULL,
    embedding_vector VECTOR(1024), -- Using 1024 dimensions for E5 model
    api_function VARCHAR(255),
    parameter_name VARCHAR(255),
    is_required_for_function BOOLEAN DEFAULT FALSE,
    example_url_snippet TEXT,
    api_category VARCHAR(255),
    priority_level VARCHAR(50) CHECK (priority_level IN ('HIGH', 'MEDIUM', 'LOW')),
    metadata JSONB DEFAULT '{}'::jsonb,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL
);

-- Create index for similarity search
CREATE INDEX api_documentation_embeddings_embedding_idx 
ON api_documentation_embeddings 
USING ivfflat (embedding_vector vector_cosine_ops)
WITH (lists = 100);

-- Create function for similarity search
CREATE OR REPLACE FUNCTION public.match_api_documentation(
    query_embedding VECTOR(1024),
    match_threshold FLOAT,
    match_count INT
)
RETURNS TABLE (
    id BIGINT,
    text_chunk TEXT,
    api_function VARCHAR(255),
    parameter_name VARCHAR(255),
    is_required_for_function BOOLEAN,
    example_url_snippet TEXT,
    api_category VARCHAR(255),
    priority_level VARCHAR(50),
    similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        api_documentation_embeddings.id,
        api_documentation_embeddings.text_chunk,
        api_documentation_embeddings.api_function,
        api_documentation_embeddings.parameter_name,
        api_documentation_embeddings.is_required_for_function,
        api_documentation_embeddings.example_url_snippet,
        api_documentation_embeddings.api_category,
        api_documentation_embeddings.priority_level,
        1 - (api_documentation_embeddings.embedding_vector <=> query_embedding) as similarity
    FROM api_documentation_embeddings
    WHERE 1 - (api_documentation_embeddings.embedding_vector <=> query_embedding) > match_threshold
    ORDER BY api_documentation_embeddings.embedding_vector <=> query_embedding
    LIMIT match_count;
END;
$$;

-- Create trigger to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER update_api_documentation_embeddings_updated_at
    BEFORE UPDATE ON public.api_documentation_embeddings
    FOR EACH ROW
    EXECUTE FUNCTION public.update_updated_at_column();

-- Add some helpful indexes
CREATE INDEX idx_api_documentation_embeddings_api_function ON api_documentation_embeddings(api_function);
CREATE INDEX idx_api_documentation_embeddings_parameter_name ON api_documentation_embeddings(parameter_name);
CREATE INDEX idx_api_documentation_embeddings_api_category ON api_documentation_embeddings(api_category);
CREATE INDEX idx_api_documentation_embeddings_priority_level ON api_documentation_embeddings(priority_level); 